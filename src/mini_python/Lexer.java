// DO NOT EDIT
// Generated by JFlex 1.9.1 http://jflex.de/
// source: src/mini_python/Lexer.flex


package mini_python;

import java_cup.runtime.*;
import java.util.*;
import static mini_python.sym.*;
import mini_python.exception_handling.Location;


@SuppressWarnings("fallthrough")
class Lexer implements java_cup.runtime.Scanner {

  /** This character denotes the end of file. */
  public static final int YYEOF = -1;

  /** Initial size of the lookahead buffer. */
  private static final int ZZ_BUFFERSIZE = 16384;

  // Lexical states.
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0, 0
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\1\u0100\1\u0200\1\u0300\1\u0400\1\u0500\1\u0600\1\u0700"+
    "\1\u0800\1\u0900\1\u0a00\1\u0b00\1\u0c00\1\u0d00\1\u0e00\1\u0f00"+
    "\1\u1000\1\u0100\1\u1100\1\u1200\1\u1300\1\u0100\1\u1400\1\u1500"+
    "\1\u1600\1\u1700\1\u1800\1\u1900\1\u1a00\1\u1b00\1\u0100\1\u1c00"+
    "\1\u1d00\1\u1e00\12\u1f00\1\u2000\1\u2100\1\u2200\1\u1f00\1\u2300"+
    "\1\u2400\2\u1f00\31\u0100\1\u2500\126\u0100\1\u2600\1\u0100\1\u2700"+
    "\1\u2800\1\u2900\1\u2a00\1\u2b00\1\u2c00\53\u0100\1\u2d00\10\u2e00"+
    "\31\u1f00\1\u0100\1\u2f00\1\u3000\1\u0100\1\u3100\1\u3200\1\u3300"+
    "\1\u3400\1\u3500\1\u3600\1\u3700\1\u3800\1\u3900\1\u0100\1\u3a00"+
    "\1\u3b00\1\u3c00\1\u3d00\1\u3e00\1\u3f00\1\u4000\1\u4100\1\u4200"+
    "\1\u4300\1\u4400\1\u4500\1\u4600\1\u4700\1\u4800\1\u4900\1\u4a00"+
    "\1\u4b00\1\u4c00\1\u4d00\1\u1f00\1\u4e00\1\u4f00\1\u5000\1\u5100"+
    "\3\u0100\1\u5200\1\u5300\1\u5400\11\u1f00\1\u5500\4\u0100\1\u5600"+
    "\17\u1f00\2\u0100\1\u5700\41\u1f00\2\u0100\1\u5800\1\u5900\2\u1f00"+
    "\1\u5a00\1\u5b00\27\u0100\1\u5c00\4\u0100\1\u5d00\1\u5e00\41\u1f00"+
    "\1\u5f00\1\u0100\1\u6000\1\u6100\11\u1f00\1\u6200\22\u1f00\1\u6300"+
    "\1\u1f00\1\u6400\1\u6500\1\u1f00\1\u6600\1\u6700\1\u6800\1\u6900"+
    "\2\u1f00\1\u6a00\4\u1f00\1\u6b00\1\u6c00\1\u6d00\1\u6e00\1\u1f00"+
    "\1\u6f00\2\u1f00\1\u7000\1\u7100\1\u7200\2\u1f00\1\u7300\1\u1f00"+
    "\1\u7400\14\u1f00\1\u7500\4\u1f00\246\u0100\1\u7600\20\u0100\1\u7700"+
    "\1\u7800\25\u0100\1\u7900\34\u0100\1\u7a00\14\u1f00\2\u0100\1\u7b00"+
    "\5\u1f00\23\u0100\1\u7c00\17\u0100\1\u7d00\u0adc\u1f00\1\u7e00\1\u7f00"+
    "\u02fe\u1f00";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\1\1\1\2\1\3\1\1\1\2\16\0\4\4"+
    "\1\1\1\5\1\6\1\7\1\10\1\11\2\4\1\12"+
    "\1\13\1\14\1\15\1\16\1\17\1\4\1\20\1\21"+
    "\11\22\1\23\1\4\1\24\1\25\1\26\2\4\5\10"+
    "\1\27\7\10\1\30\5\10\1\31\6\10\1\32\1\4"+
    "\1\33\1\4\1\10\1\4\1\34\2\10\1\35\1\36"+
    "\1\37\2\10\1\40\2\10\1\41\1\10\1\42\1\43"+
    "\1\44\1\10\1\45\1\46\1\47\1\50\5\10\4\4"+
    "\6\0\1\51\32\0\2\4\4\10\4\4\1\10\2\4"+
    "\1\0\7\4\1\10\4\4\1\10\5\4\27\10\1\4"+
    "\37\10\1\4\u01ca\10\4\4\14\10\16\4\5\10\7\4"+
    "\1\10\1\4\1\10\21\4\160\0\5\10\1\4\2\10"+
    "\2\4\4\10\1\4\1\10\6\4\1\10\1\4\3\10"+
    "\1\4\1\10\1\4\24\10\1\4\123\10\1\4\213\10"+
    "\1\4\5\0\2\4\246\10\1\4\46\10\2\4\1\10"+
    "\6\4\51\10\6\4\1\10\1\4\55\0\1\4\1\0"+
    "\1\4\2\0\1\4\2\0\1\4\1\0\10\4\33\10"+
    "\4\4\4\10\15\4\6\0\5\4\1\10\4\4\13\0"+
    "\1\4\1\0\3\4\53\10\25\0\12\52\4\4\2\10"+
    "\1\0\143\10\1\4\1\10\10\0\1\4\6\0\2\10"+
    "\2\0\1\4\4\0\2\10\12\52\3\10\2\4\1\10"+
    "\17\4\1\0\1\10\1\0\36\10\33\0\2\4\131\10"+
    "\13\0\1\10\16\4\12\52\41\10\11\0\2\10\4\4"+
    "\1\10\2\4\1\0\30\10\4\0\1\10\11\0\1\10"+
    "\3\0\1\10\5\0\22\4\31\10\3\0\4\4\13\10"+
    "\5\4\30\10\1\4\6\10\1\4\2\0\6\4\10\0"+
    "\52\10\72\0\66\10\3\0\1\10\22\0\1\10\7\0"+
    "\12\10\2\0\2\4\12\52\1\4\20\10\3\0\1\4"+
    "\10\10\2\4\2\10\2\4\26\10\1\4\7\10\1\4"+
    "\1\10\3\4\4\10\2\4\1\0\1\10\7\0\2\4"+
    "\2\0\2\4\3\0\1\10\10\4\1\0\4\4\2\10"+
    "\1\4\3\10\2\0\2\4\12\52\4\10\7\4\2\10"+
    "\1\4\1\0\2\4\3\0\1\4\6\10\4\4\2\10"+
    "\2\4\26\10\1\4\7\10\1\4\2\10\1\4\2\10"+
    "\1\4\2\10\2\4\1\0\1\4\5\0\4\4\2\0"+
    "\2\4\3\0\3\4\1\0\7\4\4\10\1\4\1\10"+
    "\7\4\12\52\2\0\3\10\1\0\13\4\3\0\1\4"+
    "\11\10\1\4\3\10\1\4\26\10\1\4\7\10\1\4"+
    "\2\10\1\4\5\10\2\4\1\0\1\10\10\0\1\4"+
    "\3\0\1\4\3\0\2\4\1\10\17\4\2\10\2\0"+
    "\2\4\12\52\1\4\1\10\7\4\1\10\6\0\1\4"+
    "\3\0\1\4\10\10\2\4\2\10\2\4\26\10\1\4"+
    "\7\10\1\4\2\10\1\4\5\10\2\4\1\0\1\10"+
    "\7\0\2\4\2\0\2\4\3\0\7\4\3\0\4\4"+
    "\2\10\1\4\3\10\2\0\2\4\12\52\1\4\1\10"+
    "\20\4\1\0\1\10\1\4\6\10\3\4\3\10\1\4"+
    "\4\10\3\4\2\10\1\4\1\10\1\4\2\10\3\4"+
    "\2\10\3\4\3\10\3\4\14\10\4\4\5\0\3\4"+
    "\3\0\1\4\4\0\2\4\1\10\6\4\1\0\16\4"+
    "\12\52\11\4\1\10\6\4\5\0\10\10\1\4\3\10"+
    "\1\4\27\10\1\4\20\10\2\4\1\0\1\10\7\0"+
    "\1\4\3\0\1\4\4\0\7\4\2\0\1\4\3\10"+
    "\2\4\1\10\2\4\2\10\2\0\2\4\12\52\20\4"+
    "\1\10\3\0\1\4\10\10\1\4\3\10\1\4\27\10"+
    "\1\4\12\10\1\4\5\10\2\4\1\0\1\10\7\0"+
    "\1\4\3\0\1\4\4\0\7\4\2\0\6\4\2\10"+
    "\1\4\2\10\2\0\2\4\12\52\1\4\2\10\1\0"+
    "\14\4\4\0\11\10\1\4\3\10\1\4\51\10\2\0"+
    "\1\10\7\0\1\4\3\0\1\4\4\0\1\10\5\4"+
    "\3\10\1\0\7\4\3\10\2\0\2\4\12\52\12\4"+
    "\6\10\1\4\3\0\1\4\22\10\3\4\30\10\1\4"+
    "\11\10\1\4\1\10\2\4\7\10\3\4\1\0\4\4"+
    "\6\0\1\4\1\0\1\4\10\0\6\4\12\52\2\4"+
    "\2\0\15\4\60\10\1\0\2\10\7\0\4\4\10\10"+
    "\10\0\1\4\12\52\47\4\2\10\1\4\1\10\1\4"+
    "\5\10\1\4\30\10\1\4\1\10\1\4\12\10\1\0"+
    "\2\10\11\0\1\10\2\4\5\10\1\4\1\10\1\4"+
    "\7\0\1\4\12\52\2\4\4\10\40\4\1\10\27\4"+
    "\2\0\6\4\12\52\13\4\1\0\1\4\1\0\1\4"+
    "\1\0\4\4\2\0\10\10\1\4\44\10\4\4\24\0"+
    "\1\4\2\0\5\10\13\0\1\4\44\0\11\4\1\0"+
    "\71\4\53\10\24\0\1\10\12\52\6\4\6\10\4\0"+
    "\4\10\3\0\1\10\3\0\2\10\7\0\3\10\4\0"+
    "\15\10\14\0\1\10\1\0\12\52\4\0\2\4\46\10"+
    "\1\4\1\10\5\4\1\10\2\4\53\10\1\4\115\10"+
    "\1\4\4\10\2\4\7\10\1\4\1\10\1\4\4\10"+
    "\2\4\51\10\1\4\4\10\2\4\41\10\1\4\4\10"+
    "\2\4\7\10\1\4\1\10\1\4\4\10\2\4\17\10"+
    "\1\4\71\10\1\4\4\10\2\4\103\10\2\4\3\0"+
    "\40\4\20\10\20\4\126\10\2\4\6\10\3\4\u016c\10"+
    "\2\4\21\10\1\4\32\10\5\4\113\10\3\4\13\10"+
    "\7\4\22\10\4\0\11\4\23\10\3\0\13\4\22\10"+
    "\2\0\14\4\15\10\1\4\3\10\1\4\2\0\14\4"+
    "\64\10\40\0\3\4\1\10\3\4\2\10\1\0\2\4"+
    "\12\52\41\4\5\0\12\52\6\4\131\10\7\4\5\10"+
    "\2\0\42\10\1\0\1\10\5\4\106\10\12\4\37\10"+
    "\1\4\14\0\4\4\14\0\12\4\12\52\36\10\2\4"+
    "\5\10\13\4\54\10\4\4\32\10\6\4\12\52\46\4"+
    "\27\10\5\0\4\4\65\10\12\0\1\4\35\0\2\4"+
    "\1\0\12\52\6\4\12\52\15\4\1\10\10\4\16\0"+
    "\1\4\20\0\61\4\5\0\57\10\21\0\10\10\3\4"+
    "\12\52\21\4\11\0\14\4\3\0\36\10\15\0\2\10"+
    "\12\52\54\10\16\0\14\4\44\10\24\0\10\4\12\52"+
    "\3\4\3\10\12\52\44\10\2\4\11\10\7\4\53\10"+
    "\2\4\3\10\20\4\3\0\1\4\25\0\4\10\1\0"+
    "\6\10\1\0\2\10\3\0\1\10\5\4\300\10\100\0"+
    "\26\10\2\4\6\10\2\4\46\10\2\4\6\10\2\4"+
    "\10\10\1\4\1\10\1\4\1\10\1\4\1\10\1\4"+
    "\37\10\2\4\65\10\1\4\7\10\1\4\1\10\3\4"+
    "\3\10\1\4\7\10\3\4\4\10\2\4\6\10\4\4"+
    "\15\10\5\4\3\10\1\4\7\10\16\4\5\0\30\4"+
    "\2\3\5\0\20\4\2\10\23\4\1\10\13\4\5\0"+
    "\1\4\12\0\1\4\1\10\15\4\1\10\20\4\15\10"+
    "\3\4\41\10\17\4\15\0\4\4\1\0\3\4\14\0"+
    "\21\4\1\10\4\4\1\10\2\4\12\10\1\4\1\10"+
    "\3\4\5\10\6\4\1\10\1\4\1\10\1\4\1\10"+
    "\1\4\4\10\1\4\13\10\2\4\4\10\5\4\5\10"+
    "\4\4\1\10\21\4\51\10\u0177\4\345\10\6\4\4\10"+
    "\3\0\2\10\14\4\46\10\1\4\1\10\5\4\1\10"+
    "\2\4\70\10\7\4\1\10\17\4\1\0\27\10\11\4"+
    "\7\10\1\4\7\10\1\4\7\10\1\4\7\10\1\4"+
    "\7\10\1\4\7\10\1\4\7\10\1\4\7\10\1\4"+
    "\40\0\57\4\1\10\325\4\3\10\31\4\11\10\6\0"+
    "\1\4\5\10\2\4\5\10\4\4\126\10\2\4\2\0"+
    "\2\4\3\10\1\4\132\10\1\4\4\10\5\4\53\10"+
    "\1\4\136\10\21\4\40\10\60\4\320\10\100\4\215\10"+
    "\103\4\56\10\2\4\15\10\3\4\20\10\12\52\2\10"+
    "\24\4\57\10\1\0\4\4\12\0\1\4\37\10\2\0"+
    "\120\10\2\0\45\4\11\10\2\4\147\10\2\4\100\10"+
    "\5\4\2\10\1\4\1\10\1\4\5\10\30\4\20\10"+
    "\1\0\3\10\1\0\4\10\1\0\27\10\5\0\4\4"+
    "\1\0\13\4\1\10\7\4\64\10\14\4\2\0\62\10"+
    "\22\0\12\4\12\52\6\4\22\0\6\10\3\4\1\10"+
    "\1\4\2\10\1\0\12\52\34\10\10\0\2\4\27\10"+
    "\15\0\14\4\35\10\3\4\4\0\57\10\16\0\16\4"+
    "\1\10\12\52\6\4\5\10\1\0\12\10\12\52\5\10"+
    "\1\4\51\10\16\0\11\4\3\10\1\0\10\10\2\0"+
    "\2\4\12\52\6\4\27\10\3\4\1\10\3\0\62\10"+
    "\1\0\1\10\3\0\2\10\2\0\5\10\2\0\1\10"+
    "\1\0\1\10\30\4\3\10\2\4\13\10\5\0\2\4"+
    "\3\10\2\0\12\4\6\10\2\4\6\10\2\4\6\10"+
    "\11\4\7\10\1\4\7\10\1\4\53\10\1\4\16\10"+
    "\6\4\163\10\10\0\1\4\2\0\2\4\12\52\6\4"+
    "\244\10\14\4\27\10\4\4\61\10\4\4\u0100\3\156\10"+
    "\2\4\152\10\46\4\7\10\14\4\5\10\5\4\1\10"+
    "\1\0\12\10\1\4\15\10\1\4\5\10\1\4\1\10"+
    "\1\4\2\10\1\4\2\10\1\4\154\10\41\4\153\10"+
    "\22\4\100\10\2\4\66\10\50\4\15\10\3\4\20\0"+
    "\20\4\20\0\3\4\2\10\30\4\3\10\31\4\1\10"+
    "\6\4\5\10\1\4\207\10\2\4\1\0\4\4\1\10"+
    "\13\4\12\52\7\4\32\10\4\4\1\10\1\4\32\10"+
    "\13\4\131\10\3\4\6\10\2\4\6\10\2\4\6\10"+
    "\2\4\3\10\3\4\2\10\3\4\2\10\22\4\3\0"+
    "\4\4\14\10\1\4\32\10\1\4\23\10\1\4\2\10"+
    "\1\4\17\10\2\4\16\10\42\4\173\10\105\4\65\10"+
    "\210\4\1\0\202\4\35\10\3\4\61\10\17\4\1\0"+
    "\37\4\40\10\15\4\36\10\5\4\46\10\5\0\5\4"+
    "\36\10\2\4\44\10\4\4\10\10\1\4\5\10\52\4"+
    "\236\10\2\4\12\52\6\4\44\10\4\4\44\10\4\4"+
    "\50\10\10\4\64\10\14\4\13\10\1\4\17\10\1\4"+
    "\7\10\1\4\2\10\1\4\13\10\1\4\17\10\1\4"+
    "\7\10\1\4\2\10\103\4\67\10\11\4\26\10\12\4"+
    "\10\10\30\4\6\10\1\4\52\10\1\4\11\10\105\4"+
    "\6\10\2\4\1\10\1\4\54\10\1\4\2\10\3\4"+
    "\1\10\2\4\27\10\12\4\27\10\11\4\37\10\101\4"+
    "\23\10\1\4\2\10\12\4\26\10\12\4\32\10\106\4"+
    "\70\10\6\4\2\10\100\4\1\10\3\0\1\4\2\0"+
    "\5\4\4\0\4\10\1\4\3\10\1\4\35\10\2\4"+
    "\3\0\4\4\1\0\40\4\35\10\3\4\35\10\43\4"+
    "\10\10\1\4\34\10\2\0\31\4\66\10\12\4\26\10"+
    "\12\4\23\10\15\4\22\10\156\4\111\10\67\4\63\10"+
    "\15\4\63\10\15\4\44\10\4\0\10\4\12\52\u0146\4"+
    "\52\10\1\4\2\0\3\4\2\10\113\4\3\0\35\10"+
    "\12\4\1\10\10\4\26\10\13\0\37\4\22\10\4\0"+
    "\52\4\25\10\33\4\27\10\11\4\3\0\65\10\17\0"+
    "\37\4\12\52\1\0\2\10\2\0\1\10\11\4\4\0"+
    "\55\10\13\0\2\4\1\0\4\4\1\0\12\4\1\0"+
    "\2\4\31\10\7\4\12\52\6\4\3\0\44\10\16\0"+
    "\1\4\12\52\4\4\1\10\2\0\1\10\10\4\43\10"+
    "\1\0\2\4\1\10\11\4\3\0\60\10\16\0\4\10"+
    "\4\4\4\0\1\4\2\0\12\52\1\10\1\4\1\10"+
    "\43\4\22\10\1\4\31\10\14\0\6\4\1\0\2\10"+
    "\1\0\76\4\7\10\1\4\1\10\1\4\4\10\1\4"+
    "\17\10\1\4\12\10\7\4\57\10\14\0\5\4\12\52"+
    "\6\4\4\0\1\4\10\10\2\4\2\10\2\4\26\10"+
    "\1\4\7\10\1\4\2\10\1\4\5\10\1\4\2\0"+
    "\1\10\7\0\2\4\2\0\2\4\3\0\2\4\1\10"+
    "\6\4\1\0\5\4\5\10\2\0\2\4\7\0\3\4"+
    "\5\0\213\4\65\10\22\0\4\10\5\4\12\52\4\4"+
    "\1\0\3\10\36\4\60\10\24\0\2\10\1\4\1\10"+
    "\10\4\12\52\246\4\57\10\7\0\2\4\11\0\27\4"+
    "\4\10\2\0\42\4\60\10\21\0\3\4\1\10\13\4"+
    "\12\52\46\4\53\10\15\0\1\10\7\4\12\52\66\4"+
    "\33\10\2\4\17\0\4\4\12\52\6\4\7\10\271\4"+
    "\54\10\17\0\145\4\100\10\12\52\25\4\10\10\2\4"+
    "\1\10\2\4\10\10\1\4\2\10\1\4\30\10\6\0"+
    "\1\4\2\0\2\4\4\0\1\10\1\0\1\10\2\0"+
    "\14\4\12\0\106\4\10\10\2\4\47\10\7\0\2\4"+
    "\7\0\1\10\1\4\1\10\1\0\33\4\1\10\12\0"+
    "\50\10\7\0\1\10\4\0\10\4\1\0\10\4\1\10"+
    "\13\0\56\10\20\0\3\4\1\10\22\4\111\10\7\4"+
    "\11\10\1\4\45\10\10\0\1\4\10\0\1\10\17\4"+
    "\12\52\30\4\36\10\2\4\26\0\1\4\16\0\111\4"+
    "\7\10\1\4\2\10\1\4\46\10\6\0\3\4\1\0"+
    "\1\4\2\0\1\4\7\0\1\10\1\0\10\4\12\52"+
    "\6\4\6\10\1\4\2\10\1\4\40\10\5\0\1\4"+
    "\2\0\1\4\5\0\1\10\7\4\12\52\u0136\4\23\10"+
    "\4\0\11\4\2\0\1\10\1\0\15\10\1\4\42\10"+
    "\7\0\3\4\5\0\15\4\12\0\126\4\1\10\54\4"+
    "\4\10\37\4\232\10\146\4\157\10\21\4\304\10\u014c\4"+
    "\141\10\17\4\60\10\21\0\6\10\17\0\252\4\107\10"+
    "\271\4\71\10\7\4\37\10\1\4\12\52\6\4\117\10"+
    "\1\4\12\0\6\4\36\10\2\4\5\0\13\4\60\10"+
    "\7\0\11\4\4\10\14\4\12\52\11\4\25\10\5\4"+
    "\23\10\260\4\100\10\200\4\113\10\4\4\1\0\1\10"+
    "\67\0\7\4\4\0\15\10\100\4\2\10\1\4\1\10"+
    "\1\0\13\4\2\0\16\4\370\10\10\4\326\10\52\4"+
    "\11\10\u01e7\4\4\10\1\4\7\10\1\4\2\10\1\4"+
    "\43\10\17\4\1\10\35\4\3\10\2\4\1\10\16\4"+
    "\4\10\10\4\u018c\10\4\4\153\10\5\4\15\10\3\4"+
    "\11\10\7\4\12\10\3\4\2\0\1\4\4\0\134\4"+
    "\56\0\2\4\27\0\u011e\4\5\0\3\4\26\0\2\4"+
    "\7\0\36\4\4\0\224\4\3\0\273\4\125\10\1\4"+
    "\107\10\1\4\2\10\2\4\1\10\2\4\2\10\2\4"+
    "\4\10\1\4\14\10\1\4\1\10\1\4\7\10\1\4"+
    "\101\10\1\4\4\10\2\4\10\10\1\4\7\10\1\4"+
    "\34\10\1\4\4\10\1\4\5\10\1\4\1\10\3\4"+
    "\7\10\1\4\u0154\10\2\4\31\10\1\4\31\10\1\4"+
    "\37\10\1\4\31\10\1\4\37\10\1\4\31\10\1\4"+
    "\37\10\1\4\31\10\1\4\37\10\1\4\31\10\1\4"+
    "\10\10\2\4\62\52\67\0\4\4\62\0\10\4\1\0"+
    "\16\4\1\0\26\4\5\0\1\4\17\0\120\4\37\10"+
    "\6\4\6\10\325\4\7\0\1\4\21\0\2\4\7\0"+
    "\1\4\2\0\1\4\5\0\5\4\76\10\41\4\1\0"+
    "\160\4\55\10\3\4\7\0\7\10\2\4\12\52\4\4"+
    "\1\10\u0141\4\36\10\1\0\21\4\54\10\4\0\12\52"+
    "\5\4\1\10\320\4\34\10\16\0\346\4\7\10\1\4"+
    "\4\10\1\4\2\10\1\4\17\10\1\4\305\10\13\4"+
    "\7\0\51\4\104\10\7\0\1\10\4\4\12\52\u0156\4"+
    "\1\10\117\4\4\10\1\4\33\10\1\4\2\10\1\4"+
    "\1\10\2\4\1\10\1\4\12\10\1\4\4\10\1\4"+
    "\1\10\1\4\1\10\6\4\1\10\4\4\1\10\1\4"+
    "\1\10\1\4\1\10\1\4\3\10\1\4\2\10\1\4"+
    "\1\10\2\4\1\10\1\4\1\10\1\4\1\10\1\4"+
    "\1\10\1\4\1\10\1\4\2\10\1\4\1\10\2\4"+
    "\4\10\1\4\7\10\1\4\4\10\1\4\4\10\1\4"+
    "\1\10\1\4\12\10\1\4\21\10\5\4\3\10\1\4"+
    "\5\10\1\4\21\10\u0134\4\12\0\6\4\340\10\40\4"+
    "\72\10\6\4\336\10\2\4\u0182\10\16\4\u0131\10\37\4"+
    "\36\10\342\4\113\10\5\4\u0160\10\121\4\1\0\36\4"+
    "\140\0\200\4\360\0\20\4";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[32768];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\2\1\1\2\1\4\1\5"+
    "\1\6\1\7\1\10\1\11\1\12\1\13\1\1\2\14"+
    "\1\15\1\16\1\17\1\20\3\4\1\21\1\22\11\4"+
    "\1\0\1\23\1\0\1\24\1\25\1\26\1\27\1\30"+
    "\7\4\1\31\1\32\1\4\1\33\5\4\1\34\1\35"+
    "\1\4\1\36\1\37\3\4\1\40\1\41\1\42\2\4"+
    "\1\43\1\44\1\4\1\45";

  private static int [] zzUnpackAction() {
    int [] result = new int[77];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\53\0\126\0\201\0\254\0\327\0\u0102\0\u012d"+
    "\0\53\0\53\0\53\0\53\0\53\0\53\0\53\0\u0158"+
    "\0\53\0\u0183\0\53\0\u01ae\0\u01d9\0\u0204\0\u022f\0\u025a"+
    "\0\u0285\0\53\0\53\0\u02b0\0\u02db\0\u0306\0\u0331\0\u035c"+
    "\0\u0387\0\u03b2\0\u03dd\0\u0408\0\u0433\0\53\0\327\0\53"+
    "\0\53\0\53\0\53\0\53\0\u045e\0\u0489\0\u04b4\0\u04df"+
    "\0\u050a\0\u0535\0\u0560\0\u012d\0\u012d\0\u058b\0\u012d\0\u05b6"+
    "\0\u05e1\0\u060c\0\u0637\0\u0662\0\u012d\0\u012d\0\u068d\0\u012d"+
    "\0\u012d\0\u06b8\0\u06e3\0\u070e\0\u012d\0\u012d\0\u012d\0\u0739"+
    "\0\u0764\0\u012d\0\u012d\0\u078f\0\u012d";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[77];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length() - 1;
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpacktrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\0\1\2\1\5\1\6\1\7"+
    "\1\10\1\11\1\12\1\13\1\14\1\15\1\16\1\17"+
    "\1\20\1\21\1\22\1\23\1\24\1\25\1\26\1\27"+
    "\1\30\1\31\1\32\1\33\1\34\1\35\1\36\1\37"+
    "\1\40\1\10\1\41\1\42\1\43\1\44\3\10\1\0"+
    "\1\2\54\0\1\3\5\0\1\7\44\0\2\4\4\0"+
    "\1\45\70\0\1\46\25\0\6\47\1\50\44\47\2\7"+
    "\1\0\50\7\1\10\7\0\1\10\10\0\2\10\4\0"+
    "\3\10\2\0\17\10\20\0\1\51\53\0\2\22\27\0"+
    "\1\22\25\0\1\52\52\0\1\53\52\0\1\54\25\0"+
    "\1\10\7\0\1\10\10\0\2\10\4\0\3\10\2\0"+
    "\1\55\17\10\7\0\1\10\10\0\2\10\4\0\3\10"+
    "\2\0\7\10\1\56\10\10\7\0\1\10\10\0\2\10"+
    "\4\0\3\10\2\0\11\10\1\57\6\10\7\0\1\10"+
    "\10\0\2\10\4\0\3\10\2\0\6\10\1\60\11\10"+
    "\7\0\1\10\10\0\2\10\4\0\3\10\2\0\2\10"+
    "\1\61\15\10\7\0\1\10\10\0\2\10\4\0\3\10"+
    "\2\0\5\10\1\62\12\10\7\0\1\10\10\0\2\10"+
    "\4\0\3\10\2\0\7\10\1\63\10\10\7\0\1\10"+
    "\10\0\2\10\4\0\3\10\2\0\3\10\1\64\2\10"+
    "\1\65\11\10\7\0\1\10\10\0\2\10\4\0\3\10"+
    "\2\0\7\10\1\66\10\10\7\0\1\10\10\0\2\10"+
    "\4\0\3\10\2\0\11\10\1\67\6\10\7\0\1\10"+
    "\10\0\2\10\4\0\3\10\2\0\11\10\1\70\6\10"+
    "\7\0\1\10\10\0\2\10\4\0\3\10\2\0\2\10"+
    "\1\71\14\10\2\45\1\4\50\45\1\10\7\0\1\10"+
    "\10\0\2\10\4\0\3\10\2\0\5\10\1\72\12\10"+
    "\7\0\1\10\10\0\2\10\4\0\3\10\2\0\6\10"+
    "\1\73\11\10\7\0\1\10\10\0\2\10\4\0\3\10"+
    "\2\0\14\10\1\74\3\10\7\0\1\10\10\0\2\10"+
    "\4\0\3\10\2\0\1\10\1\75\16\10\7\0\1\10"+
    "\10\0\2\10\4\0\3\10\2\0\3\10\1\76\14\10"+
    "\7\0\1\10\10\0\2\10\4\0\3\10\2\0\12\10"+
    "\1\77\5\10\7\0\1\10\10\0\2\10\4\0\3\10"+
    "\2\0\11\10\1\100\6\10\7\0\1\10\10\0\2\10"+
    "\4\0\3\10\2\0\13\10\1\101\4\10\7\0\1\10"+
    "\10\0\2\10\4\0\3\10\2\0\4\10\1\102\13\10"+
    "\7\0\1\10\10\0\2\10\4\0\3\10\2\0\13\10"+
    "\1\103\4\10\7\0\1\10\10\0\2\10\4\0\3\10"+
    "\2\0\12\10\1\104\5\10\7\0\1\10\10\0\2\10"+
    "\4\0\3\10\2\0\2\10\1\105\15\10\7\0\1\10"+
    "\10\0\2\10\4\0\3\10\2\0\2\10\1\106\15\10"+
    "\7\0\1\10\10\0\2\10\4\0\3\10\2\0\2\10"+
    "\1\107\15\10\7\0\1\10\10\0\2\10\4\0\3\10"+
    "\2\0\6\10\1\110\11\10\7\0\1\10\10\0\2\10"+
    "\4\0\3\10\2\0\14\10\1\111\3\10\7\0\1\10"+
    "\10\0\2\10\4\0\3\10\2\0\2\10\1\112\15\10"+
    "\7\0\1\10\10\0\2\10\4\0\3\10\2\0\13\10"+
    "\1\113\4\10\7\0\1\10\10\0\2\10\4\0\3\10"+
    "\2\0\11\10\1\114\6\10\7\0\1\10\10\0\2\10"+
    "\4\0\3\10\2\0\6\10\1\115\10\10";

  private static int [] zzUnpacktrans() {
    int [] result = new int[1978];
    int offset = 0;
    offset = zzUnpacktrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpacktrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** Error code for "Unknown internal scanner error". */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  /** Error code for "could not match input". */
  private static final int ZZ_NO_MATCH = 1;
  /** Error code for "pushback value was too large". */
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /**
   * Error messages for {@link #ZZ_UNKNOWN_ERROR}, {@link #ZZ_NO_MATCH}, and
   * {@link #ZZ_PUSHBACK_2BIG} respectively.
   */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\6\1\7\11\1\1\1\11\1\1\1\11"+
    "\6\1\2\11\11\1\1\0\1\11\1\0\5\11\41\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[77];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** Input device. */
  private java.io.Reader zzReader;

  /** Current state of the DFA. */
  private int zzState;

  /** Current lexical state. */
  private int zzLexicalState = YYINITIAL;

  /**
   * This buffer contains the current text to be matched and is the source of the {@link #yytext()}
   * string.
   */
  private char zzBuffer[] = new char[Math.min(ZZ_BUFFERSIZE, zzMaxBufferLen())];

  /** Text position at the last accepting state. */
  private int zzMarkedPos;

  /** Current text position in the buffer. */
  private int zzCurrentPos;

  /** Marks the beginning of the {@link #yytext()} string in the buffer. */
  private int zzStartRead;

  /** Marks the last character in the buffer, that has been read from input. */
  private int zzEndRead;

  /**
   * Whether the scanner is at the end of file.
   * @see #yyatEOF
   */
  private boolean zzAtEOF;

  /**
   * The number of occupied positions in {@link #zzBuffer} beyond {@link #zzEndRead}.
   *
   * <p>When a lead/high surrogate has been read from the input stream into the final
   * {@link #zzBuffer} position, this will have a value of 1; otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /** Number of newlines encountered up to the start of the matched text. */
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  private int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  private boolean zzEOFDone;

  /* user code: */

    private Symbol symbol(int id)
    {
	return new Symbol(id, yyline, yycolumn);
    }

    private Symbol symbol(int id, Object value)
    {
	return new Symbol(id, yyline, yycolumn, value);
    }

    static Stack<Integer> indent = new Stack<Integer>();
    { indent.push(0); }



  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  Lexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** Returns the maximum size of the scanner buffer, which limits the size of tokens. */
  private int zzMaxBufferLen() {
    return Integer.MAX_VALUE;
  }

  /**  Whether the scanner buffer can grow to accommodate a larger token. */
  private boolean zzCanGrow() {
    return true;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  /**
   * Refills the input buffer.
   *
   * @return {@code false} iff there was new input.
   * @exception java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead - zzStartRead);

      /* translate stored positions */
      zzEndRead -= zzStartRead;
      zzCurrentPos -= zzStartRead;
      zzMarkedPos -= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate && zzCanGrow()) {
      /* if not, and it can grow: blow it up */
      char newBuffer[] = new char[Math.min(zzBuffer.length * 2, zzMaxBufferLen())];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      if (requested == 0) {
        throw new java.io.EOFException("Scan buffer limit reached ["+zzBuffer.length+"]");
      }
      else {
        throw new java.io.IOException(
            "Reader returned 0 characters. See JFlex examples/zero-reader for a workaround.");
      }
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
        if (numRead == requested) { // We requested too few chars to encode a full Unicode character
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        } else {                    // There is room in the buffer for at least one more char
          int c = zzReader.read();  // Expecting to read a paired low surrogate char
          if (c == -1) {
            return true;
          } else {
            zzBuffer[zzEndRead++] = (char)c;
          }
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }


  /**
   * Closes the input reader.
   *
   * @throws java.io.IOException if the reader could not be closed.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true; // indicate end of file
    zzEndRead = zzStartRead; // invalidate buffer

    if (zzReader != null) {
      zzReader.close();
    }
  }


  /**
   * Resets the scanner to read from a new input stream.
   *
   * <p>Does not close the old reader.
   *
   * <p>All internal variables are reset, the old input stream <b>cannot</b> be reused (internal
   * buffer is discarded and lost). Lexical state is set to {@code ZZ_INITIAL}.
   *
   * <p>Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader The new input stream.
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzEOFDone = false;
    yyResetPosition();
    zzLexicalState = YYINITIAL;
    int initBufferSize = Math.min(ZZ_BUFFERSIZE, zzMaxBufferLen());
    if (zzBuffer.length > initBufferSize) {
      zzBuffer = new char[initBufferSize];
    }
  }

  /**
   * Resets the input position.
   */
  private final void yyResetPosition() {
      zzAtBOL  = true;
      zzAtEOF  = false;
      zzCurrentPos = 0;
      zzMarkedPos = 0;
      zzStartRead = 0;
      zzEndRead = 0;
      zzFinalHighSurrogate = 0;
      yyline = 0;
      yycolumn = 0;
      yychar = 0L;
  }


  /**
   * Returns whether the scanner has reached the end of the reader it reads from.
   *
   * @return whether the scanner has reached EOF.
   */
  public final boolean yyatEOF() {
    return zzAtEOF;
  }


  /**
   * Returns the current lexical state.
   *
   * @return the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state.
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   *
   * @return the matched text.
   */
  public final String yytext() {
    return new String(zzBuffer, zzStartRead, zzMarkedPos-zzStartRead);
  }


  /**
   * Returns the character at the given position from the matched text.
   *
   * <p>It is equivalent to {@code yytext().charAt(pos)}, but faster.
   *
   * @param position the position of the character to fetch. A value from 0 to {@code yylength()-1}.
   *
   * @return the character at {@code position}.
   */
  public final char yycharat(int position) {
    return zzBuffer[zzStartRead + position];
  }


  /**
   * How many characters were matched.
   *
   * @return the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * <p>In a well-formed scanner (no or only correct usage of {@code yypushback(int)} and a
   * match-all fallback rule) this method will only be called with things that
   * "Can't Possibly Happen".
   *
   * <p>If this method is called, something is seriously wrong (e.g. a JFlex bug producing a faulty
   * scanner etc.).
   *
   * <p>Usual syntax/scanner level error handling should be done in error fallback rules.
   *
   * @param errorCode the code of the error message to display.
   */
  private static void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    } catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * <p>They will be read again by then next call of the scanning method.
   *
   * @param number the number of characters to be read again. This number must not be greater than
   *     {@link #yylength()}.
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
  yyclose();    }
  }




  /**
   * Resumes scanning until the next regular expression is matched, the end of input is encountered
   * or an I/O-Error occurs.
   *
   * @return the next token.
   * @exception java.io.IOException if any I/O-Error occurs.
   */
  @Override  public java_cup.runtime.Symbol next_token() throws java.io.IOException
    , Exception
  {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char[] zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is
        // (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof)
            zzPeek = false;
          else
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
          { return new java_cup.runtime.Symbol(sym.EOF); }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { throw new Exception (String.format (
        "%d:%d:\nerror: illegal character: '%s'\n", yyline+1, yycolumn, yytext()
      ));
            }
          // fall through
          case 38: break;
          case 2:
            { /* ignore */
            }
          // fall through
          case 39: break;
          case 3:
            { String s = yytext();
      int n = s.length() - 1 - s.lastIndexOf('\n');
      // System.out.println("n = " + n);
      if (indent.peek() < n) {
        indent.push(n);
        return symbol(INCINDENT);
      } else {
        int k = 0;
        while (indent.peek() > n) { indent.pop(); k++; }
        if (indent.peek() != n)
          throw new Exception(String.format(
            "%d:%d:\nerror: indentation error\n", yyline+1, yycolumn));
        return symbol(DECINDENT, k);
      }
            }
          // fall through
          case 40: break;
          case 4:
            { return symbol(IDENT,
                    new Ident(yytext().intern(),
                              new Location(yyline, yycolumn)));
            }
          // fall through
          case 41: break;
          case 5:
            { return symbol(MOD);
            }
          // fall through
          case 42: break;
          case 6:
            { return symbol(LP);
            }
          // fall through
          case 43: break;
          case 7:
            { return symbol(RP);
            }
          // fall through
          case 44: break;
          case 8:
            { return symbol(TIMES);
            }
          // fall through
          case 45: break;
          case 9:
            { return symbol(PLUS);
            }
          // fall through
          case 46: break;
          case 10:
            { return symbol(COMMA);
            }
          // fall through
          case 47: break;
          case 11:
            { return symbol(MINUS);
            }
          // fall through
          case 48: break;
          case 12:
            { return symbol(CST, new Cint(Long.parseLong(yytext())));
            }
          // fall through
          case 49: break;
          case 13:
            { return symbol(COLON);
            }
          // fall through
          case 50: break;
          case 14:
            { return symbol(CMP, Binop.Blt);
            }
          // fall through
          case 51: break;
          case 15:
            { return symbol(EQUAL);
            }
          // fall through
          case 52: break;
          case 16:
            { return symbol(CMP, Binop.Bgt);
            }
          // fall through
          case 53: break;
          case 17:
            { return symbol(LSQ);
            }
          // fall through
          case 54: break;
          case 18:
            { return symbol(RSQ);
            }
          // fall through
          case 55: break;
          case 19:
            { return symbol(CMP, Binop.Bneq);
            }
          // fall through
          case 56: break;
          case 20:
            { String s = yytext();
      return symbol(CST, new Cstring(s.substring(1, s.length() - 1)));
            }
          // fall through
          case 57: break;
          case 21:
            { return symbol(DIV);
            }
          // fall through
          case 58: break;
          case 22:
            { return symbol(CMP, Binop.Ble);
            }
          // fall through
          case 59: break;
          case 23:
            { return symbol(CMP, Binop.Beq);
            }
          // fall through
          case 60: break;
          case 24:
            { return symbol(CMP, Binop.Bge);
            }
          // fall through
          case 61: break;
          case 25:
            { return symbol(IF);
            }
          // fall through
          case 62: break;
          case 26:
            { return symbol(IN);
            }
          // fall through
          case 63: break;
          case 27:
            { return symbol(OR);
            }
          // fall through
          case 64: break;
          case 28:
            { return symbol(AND);
            }
          // fall through
          case 65: break;
          case 29:
            { return symbol(DEF);
            }
          // fall through
          case 66: break;
          case 30:
            { return symbol(FOR);
            }
          // fall through
          case 67: break;
          case 31:
            { return symbol(NOT);
            }
          // fall through
          case 68: break;
          case 32:
            { return symbol(CST, Constant.None);
            }
          // fall through
          case 69: break;
          case 33:
            { return symbol(CST, new Cbool(true));
            }
          // fall through
          case 70: break;
          case 34:
            { return symbol(ELSE);
            }
          // fall through
          case 71: break;
          case 35:
            { return symbol(CST, new Cbool(false));
            }
          // fall through
          case 72: break;
          case 36:
            { return symbol(PRINT);
            }
          // fall through
          case 73: break;
          case 37:
            { return symbol(RETURN);
            }
          // fall through
          case 74: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }

  /**
   * Converts an int token code into the name of the
   * token by reflection on the cup symbol class/interface sym
   */
  private static String getTokenName(int token) {
    try {
      java.lang.reflect.Field [] classFields = sym.class.getFields();
      for (int i = 0; i < classFields.length; i++) {
        if (classFields[i].getInt(null) == token) {
          return classFields[i].getName();
        }
      }
    } catch (Exception e) {
      e.printStackTrace(System.err);
    }

    return "UNKNOWN TOKEN";
  }

  /**
   * Same as next_token but also prints the token to standard out
   * for debugging.
   */
  public java_cup.runtime.Symbol debug_next_token() throws java.io.IOException
    , Exception {
    java_cup.runtime.Symbol s = next_token();
    System.out.println( "line:" + (yyline+1) + " col:" + (yycolumn+1) + " --"+ yytext() + "--" + getTokenName(s.sym) + "--");
    return s;
  }

  /**
   * Runs the scanner on input files.
   *
   * This main method is the debugging routine for the scanner.
   * It prints debugging information about each returned token to
   * System.out until the end of file is reached, or an error occured.
   *
   * @param argv   the command line, contains the filenames to run
   *               the scanner on.
   */
  public static void main(String[] argv) {
    if (argv.length == 0) {
      System.out.println("Usage : java Lexer [ --encoding <name> ] <inputfile(s)>");
    }
    else {
      int firstFilePos = 0;
      String encodingName = "UTF-8";
      if (argv[0].equals("--encoding")) {
        firstFilePos = 2;
        encodingName = argv[1];
        try {
          // Side-effect: is encodingName valid?
          java.nio.charset.Charset.forName(encodingName);
        } catch (Exception e) {
          System.out.println("Invalid encoding '" + encodingName + "'");
          return;
        }
      }
      for (int i = firstFilePos; i < argv.length; i++) {
        Lexer scanner = null;
        java.io.FileInputStream stream = null;
        java.io.Reader reader = null;
        try {
          stream = new java.io.FileInputStream(argv[i]);
          reader = new java.io.InputStreamReader(stream, encodingName);
          scanner = new Lexer(reader);
          while ( !scanner.zzAtEOF ) scanner.debug_next_token();
        }
        catch (java.io.FileNotFoundException e) {
          System.out.println("File not found : \""+argv[i]+"\"");
        }
        catch (java.io.IOException e) {
          System.out.println("IO error scanning file \""+argv[i]+"\"");
          System.out.println(e);
        }
        catch (Exception e) {
          System.out.println("Unexpected exception:");
          e.printStackTrace();
        }
        finally {
          if (reader != null) {
            try {
              reader.close();
            }
            catch (java.io.IOException e) {
              System.out.println("IO error closing file \""+argv[i]+"\"");
              System.out.println(e);
            }
          }
          if (stream != null) {
            try {
              stream.close();
            }
            catch (java.io.IOException e) {
              System.out.println("IO error closing file \""+argv[i]+"\"");
              System.out.println(e);
            }
          }
        }
      }
    }
  }


}
